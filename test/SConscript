#
# Copyright (C) 2009-2021 Alex Smith
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

import os

Import('env', 'config')

if config['ARCH'] == 'x86':
    x86_sources = [
        'platform/pc/console.c',
        '../source/drivers/serial/ns16550.c',
        '../source/drivers/console/vga.c',
    ]
    variants = [
        {
            'arch': 'ia32',
            'ccflags': ['-m32', '-mno-sse', '-mno-mmx', '-mno-sse2', '-mno-3dnow', '-fno-pic'],
            'asflags': ['-m32', '-fno-pic'],
            'linkflags': ['-m32', '$NO_PIE'],
            'sources': x86_sources + [
                'arch/ia32/mmu.c',
                '../source/lib/runtime/i386/udivdi3.S',
                '../source/lib/runtime/i386/umoddi3.S',
                '../source/lib/runtime/udivmoddi4.c',
            ],
        }, {
            'arch': 'amd64',
            'ccflags': ['-m64', '-mcmodel=kernel', '-mno-red-zone', '-mno-sse', '-mno-mmx', '-mno-sse2', '-mno-3dnow', '-fno-pic'],
            'asflags': ['-m64', '-fno-pic'],
            'linkflags': ['-m64', '$NO_PIE'],
            'sources': x86_sources + [
                'arch/amd64/mmu.c',
            ],
        },
    ]
elif config['ARCH'] == 'arm64':
    variants = [
        {
            'arch': 'arm64',
            'ccflags': ['-mgeneral-regs-only', '-fno-pic'],
            'asflags': ['-fno-pic'],
            'sources': [
                'arch/arm64/mmu.c',
                'platform/dt/console.c',
                '../source/drivers/serial/ns16550.c',
                '../source/drivers/serial/pl011.c',
            ]
        }
    ]
else:
    variants = []

main_sources = [
    'console.c',
    'main.c',
    'mm.c',
    '../source/drivers/console/fb.c',
    '../source/drivers/console/font.c',
    '../source/drivers/console/serial.c',
    '../source/lib/printf.c',
    '../source/lib/string.c',
    '../source/fb.c',
]

for variant in variants:
    arch = variant['arch']
    ccflags = variant['ccflags'] if 'ccflags' in variant else []
    asflags = variant['asflags'] if 'asflags' in variant else []
    linkflags = variant['linkflags'] if 'linkflags' in variant else []
    variant_sources = variant['sources'] if 'sources' in variant else []

    ldscript = env.LDScript('%s/arch/%s/link.ld' % (arch, arch), 'arch/%s/link.ld.in' % (arch))

    # Override whatever machine-specific flags were used to compile the loader.
    ccflags += [x for x in env['CCFLAGS'] if not x.startswith('-m') and x != '-fpic']
    asflags += [x for x in env['ASFLAGS'] if not x.startswith('-m') and x != '-fpic']

    linkflags += ['-nostdlib', '-Wl,--build-id=none']
    linkflags += ["-Wl,-T,${File('%s/arch/%s/link.ld')}" % (arch, arch)]

    sources = map(File, main_sources + variant_sources)

    # Generate a unique object name per variant for each source file.
    objects = []
    for source in sources:
        path = os.path.splitext(str(source))[0]
        external = str(Dir('../source'))
        if path.startswith(external):
            path = os.path.join(arch, 'external', '%s.o' % (path[len(external) + 1:]))
        else:
            path = os.path.join(arch, '%s.o' % (path))
        objects.append(env.Object(
            path,
            source,
            CCFLAGS = ccflags,
            ASFLAGS = asflags,
            CPPPATH = env['CPPPATH'] + [Dir('include')],
            CPPDEFINES = ['__TEST']))

    target = env.Program('test-%s.elf' % (arch), objects, LINKFLAGS = linkflags)
    Depends(target, ldscript)

    # Generate various information files.
    env.AddPostAction(target, [
        Action('$OBJDUMP -d $TARGET > ${TARGET.base}.lst', None),
        Action('$READELF -aW $TARGET > ${TARGET.base}.rde', None),
        Action('$NM -C $TARGET | sort > ${TARGET.base}.sym', None),
    ])

    Alias('test', File('test-%s.elf' % (arch)))
