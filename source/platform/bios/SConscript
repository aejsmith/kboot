#
# Copyright (C) 2009-2021 Alex Smith
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

Import('config', 'env')
from util import FeatureSources

sources = FeatureSources(config, [
    'loader/chain.c',
    'loader/chain_enter.S',
    'loader/kboot.c',
    'loader/linux.c',
    'loader/linux_enter.S',
    'loader/multiboot.c',

    'bios.S',
    'console.c',
    'disk.c',
    'memory.c',
    'multiboot.c',
    'platform.c',
    'pxe.c',
    'start.S',
    'video.c',
])

# List of boot sectors (second value is whether to copy to output directory).
bootsects = [
    ('cdboot', False),
    ('ext2boot', True),
    ('pxeboot', False),
]

# Set the linker script path.
env['LDSCRIPT'] = env.LDScript('link.ld', 'link.ld.in')

# Some Linux distributions have their toolchain configured to build position
# independent executables by default. Make sure we disable PIC on these.
env['CCFLAGS'] += ['-fno-pic']
env['ASFLAGS'] += ['-fno-pic']

# Build the final loader binary.
kboot = env.Command(
    env['OUTDIR'].File('kboot.bin'),
    env['KBOOT'],
    Action('$OBJCOPY -O binary --strip-all $SOURCE $TARGET', '$GENCOMSTR'))

# Build the boot sectors.
env.LDScript('bootsect/bootsect.ld', 'bootsect/bootsect.ld.in')
for bs in bootsects:
    name = bs[0]
    copy = bs[1]

    # Build an ELF image.
    linkflags = env['LINKFLAGS'] + ['-Wl,-T,${TARGET.dir}/bootsect.ld', '-Wl,-N']
    target = env.Program('bootsect/%s.elf' % (name), 'bootsect/%s.S' % (name), LINKFLAGS = linkflags)
    Depends(target, File('bootsect/bootsect.ld'))

    # Create a disassembly.
    env.AddPostAction(
        target,
        Action('$OBJDUMP -d -m i386 -M i8086 $TARGET > ${TARGET.base}.lst', None))

    # Create the final stripped binary.
    env.Command(
        env['OUTDIR'].File('%s.bin' % (name)) if copy else File('bootsect/%s.bin' % (name)),
        target,
        Action('$OBJCOPY -O binary --strip-all $SOURCE $TARGET', '$GENCOMSTR'))

# Create CD/PXE boot images by concatenating the boot sector with the loader.
env.Command(
    env['OUTDIR'].File('cdkboot.img'),
    ['bootsect/cdboot.bin', kboot],
    Action('cat ${SOURCES[0]} ${SOURCES[1]} > $TARGET', '$GENCOMSTR'))
env.Command(
    env['OUTDIR'].File('pxekboot.img'),
    ['bootsect/pxeboot.bin', kboot],
    Action('cat ${SOURCES[0]} ${SOURCES[1]} > $TARGET', '$GENCOMSTR'))

Return('sources')
