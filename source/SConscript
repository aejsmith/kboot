#
# Copyright (C) 2009-2021 Alex Smith
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

vars = ['config', 'env']

Import(*vars)
from util import FeatureSources

sources = FeatureSources(config, [
    'fs/decompress.c',
    ('TARGET_HAS_DISK', 'fs/ext2.c'),
    ('TARGET_HAS_DISK', 'fs/fat.c'),
    ('TARGET_HAS_DISK', 'fs/iso9660.c'),
    ('TARGET_HAS_DISK', 'fs/tar.c'),

    ('TARGET_HAS_FDT', 'lib/fdt/fdt_addresses.c'),
    ('TARGET_HAS_FDT', 'lib/fdt/fdt.c'),
    ('TARGET_HAS_FDT', 'lib/fdt/fdt_check.c'),
    ('TARGET_HAS_FDT', 'lib/fdt/fdt_empty_tree.c'),
    ('TARGET_HAS_FDT', 'lib/fdt/fdt_overlay.c'),
    ('TARGET_HAS_FDT', 'lib/fdt/fdt_ro.c'),
    ('TARGET_HAS_FDT', 'lib/fdt/fdt_rw.c'),
    ('TARGET_HAS_FDT', 'lib/fdt/fdt_strerror.c'),
    ('TARGET_HAS_FDT', 'lib/fdt/fdt_sw.c'),
    ('TARGET_HAS_FDT', 'lib/fdt/fdt_wip.c'),

    'lib/allocator.c',
    'lib/charset.c',
    'lib/line_editor.c',
    'lib/printf.c',
    'lib/qsort.c',
    'lib/string.c',
    'lib/tinfl.c',

    ('TARGET_HAS_KBOOT64', 'TARGET_HAS_KBOOT32', 'loader/kboot.c'),
    ('TARGET_HAS_LINUX', 'loader/linux.c'),

    ('TARGET_HAS_DISK', 'partition/gpt.c'),
    ('TARGET_HAS_DISK', 'partition/mbr.c'),

    'config.c',
    'console.c',
    'device.c',
    ('TARGET_HAS_DISK', 'disk.c'),
    ('TARGET_HAS_FDT', 'dt.c'),
    'error.c',
    ('FB', 'fb.c'),
    'fs.c',
    'main.c',
    'memory.c',
    ('TARGET_HAS_NET', 'net.c'),
    ('TARGET_HAS_UI', 'menu.c'),
    'shell.c',
    'time.c',
    ('TARGET_HAS_UI', 'ui.c'),
    'version.c',
    ('TARGET_HAS_VIDEO', 'video.c'),
])

# Set the include search paths.
env['CPPPATH'] = [
    Dir('include'),
    Dir('arch/%s/include' % (config['ARCH'])),
    Dir('platform/%s/include' % (config['PLATFORM'])),
]

if config['TARGET_HAS_FDT']:
    env['CPPPATH'] += [Dir('lib/fdt/include')]

# Generate the configuration header.
f = open('config.h', 'w')
f.write('/* This file is automatically-generated, do not edit. */\n\n')
for (k, v) in config.items():
    if isinstance(v, str):
        f.write("#define CONFIG_%s \"%s\"\n" % (k, v))
    elif isinstance(v, bool):
        if v:
            f.write("#define CONFIG_%s 1\n" % (k))
    elif isinstance(v, int):
        f.write("#define CONFIG_%s %d\n" % (k, int(v)))
    else:
        raise Exception("Unsupported type %s in config" % (type(v)))
f.close()

# Generate the version string.
def gen_version_c(target, source, env):
    f = open(str(target[0]), 'w')
    f.write('/* This file is automatically-generated, do not edit. */\n\n')
    f.write('const char *kboot_loader_version = "%s";\n' % (env['VERSION']))
    f.close()
AlwaysBuild(env.Command('version.c', [], env.Action(gen_version_c, None)))

# Include the generated configuration header.
env['CONFIG_H'] = File('config.h')
env['CCFLAGS'] += ['-include', '${CONFIG_H}']
env['ASFLAGS'] += ['-include', '${CONFIG_H}']

# Platform code needs the location of the loader binary.
env['KBOOT'] = File('kboot.elf')

# Get the list of source files from the architecture/platform.
arch_sources = SConscript(dirs = ['arch/' + config['ARCH']], exports = vars)
platform_sources = SConscript(dirs = ['platform/' + config['PLATFORM']], exports = vars)
drivers_sources = SConscript(dirs = ['drivers'], exports = vars)
sources = arch_sources + platform_sources + drivers_sources + sources
objects = list(map(env.Object, sources))

# Link the loader.
linkflags = env['LINKFLAGS'] + ['-Wl,-T,$LDSCRIPT']
target = env.Program('kboot.elf', objects, LINKFLAGS = linkflags)
Depends(target, env['LDSCRIPT'])

# Generate various information files.
env.AddPostAction(target, [
    Action('$OBJDUMP -d $TARGET > ${TARGET.base}.lst', None),
    Action('$READELF -aW $TARGET > ${TARGET.base}.rde', None),
    Action('$NM -C $TARGET | sort > ${TARGET.base}.sym', None),
])
